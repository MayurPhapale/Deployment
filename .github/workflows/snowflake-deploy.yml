name: Snowflake Deployment

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy_to_snowflake:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'prod_release')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full commit history
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python sqlfluff
      
      - name: Get changed SQL files
        id: changed_files
        run: |
          # Get the latest commit SHA of main
          MAIN_SHA=$(git rev-parse origin/main)
          
          # Get the latest commit SHA of the prod release branch
          RELEASE_SHA=$(git rev-parse origin/${{ github.event.pull_request.head.ref }})
          
          # Find modified files between these commits
          MODIFIED_FILES=$(git diff --name-only $MAIN_SHA $RELEASE_SHA | grep '\.sql$' || true)
          
          # Store modified files in an environment variable
          echo "MODIFIED_FILES<<EOF" >> $GITHUB_ENV
          echo "$MODIFIED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Print modified files for debugging
          echo "Modified SQL files:"
          echo "$MODIFIED_FILES"
      
      - name: Deploy changed SQL files to Snowflake
        if: env.MODIFIED_FILES != ''
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          LOG_TABLE: "DEPLOYMENT_LOGS"
        run: |
          echo "Deploying modified SQL files..."
          for file in $MODIFIED_FILES; do
            echo "Executing $file..."
            python -c "
            import os, snowflake.connector
            conn = snowflake.connector.connect(
                user=os.getenv('SNOWFLAKE_USER'),
                password=os.getenv('SNOWFLAKE_PASSWORD'),
                account=os.getenv('SNOWFLAKE_ACCOUNT'),
                warehouse=os.getenv('SNOWFLAKE_WAREHOUSE'),
                database=os.getenv('SNOWFLAKE_DATABASE'),
                schema=os.getenv('SNOWFLAKE_SCHEMA'),
                role=os.getenv('SNOWFLAKE_ROLE')
            )
            cur = conn.cursor()
            sql_script = open('$file', 'r').read()
            cur.execute(sql_script)
            conn.close()
            "
          done
      
      - name: Generate Deployment Summary
        if: always()
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          LOG_TABLE: "DEPLOYMENT_LOGS"
        run: |
          cat > log_summary.py << 'EOL'
          import os
          import snowflake.connector

          account = os.environ.get('SNOWFLAKE_ACCOUNT')
          user = os.environ.get('SNOWFLAKE_USER')
          password = os.environ.get('SNOWFLAKE_PASSWORD')
          role = os.environ.get('SNOWFLAKE_ROLE')
          warehouse = os.environ.get('SNOWFLAKE_WAREHOUSE')
          database = os.environ.get('SNOWFLAKE_DATABASE')
          schema = os.environ.get('SNOWFLAKE_SCHEMA')
          log_table = os.environ.get('LOG_TABLE')
          commit_sha = os.environ.get('GITHUB_SHA')

          conn = snowflake.connector.connect(
              account=account,
              user=user,
              password=password,
              role=role,
              warehouse=warehouse,
              database=database,
              schema=schema
          )
          
          cursor = conn.cursor()
          cursor.execute(f"""
          SELECT FILE_NAME, STATUS, ERROR_MESSAGE 
          FROM {log_table} 
          WHERE COMMIT_SHA = '{commit_sha}'
          ORDER BY TIMESTAMP DESC
          """)
          
          rows = cursor.fetchall()
          
          print("Deployment Log Summary:")
          print("----------------------------------------")
          
          for row in rows:
              file_name, status, error = row
              print(f"✅ {file_name}: SUCCESS" if status == 'SUCCESS' else f"❌ {file_name}: FAILED - {error}")
          
          conn.close()
          EOL
          python log_summary.py
