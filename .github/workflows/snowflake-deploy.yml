name: Snowflake Deployment

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy_to_snowflake:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'prod_release')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to ensure we get all changes

      - name: Debug Branch
        run: echo "Running on branch $GITHUB_REF_NAME"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python sqlfluff jq

      - name: Get changed files
        id: changed-files
        run: |
          echo "Getting changed files between base and head of the PR..."
          
          # Get the base and head SHAs from the PR
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"
          
          # Get all changed files (added, modified, and renamed)
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)
          
          echo "All changed files:"
          echo "$CHANGED_FILES"
          
          # Filter only SQL files
          SQL_FILES=$(echo "$CHANGED_FILES" | grep -E '\.sql$' || true)
          
          echo "Changed SQL files:"
          echo "$SQL_FILES"
          
          # Save to output and environment variable
          echo "$SQL_FILES" > changed_files.txt
          echo "sql_files=$(echo "$SQL_FILES" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Debug Changed Files
        run: |
          echo "Changed SQL files from the PR:"
          cat changed_files.txt

      - name: Validate SQL files
        if: ${{ env.sql_files != '' }}
        run: |
          echo "Validating changed SQL files..."
          if [ ! -f changed_files.txt ] || [ ! -s changed_files.txt ]; then
            echo "No changed_files.txt found or it's empty. Skipping validation."
            exit 0
          fi
          
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "Validating $file"
              sqlfluff lint --exclude-rules LT02,RF04 --config .sqlfluff "$file" || true
            fi
          done < changed_files.txt

      - name: Deploy changed SQL files to Snowflake
        if: ${{ env.sql_files != '' }}
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
        run: |
          if [ ! -f changed_files.txt ] || [ ! -s changed_files.txt ]; then
            echo "No changed_files.txt found or it's empty. Skipping deployment."
            exit 0
          fi
          
          cat > deploy.py << 'EOL'
          import os
          import snowflake.connector
          import sys
          
          # Get environment variables
          account = os.getenv('SNOWFLAKE_ACCOUNT')
          user = os.getenv('SNOWFLAKE_USER')
          password = os.getenv('SNOWFLAKE_PASSWORD')
          role = os.getenv('SNOWFLAKE_ROLE')
          warehouse = os.getenv('SNOWFLAKE_WAREHOUSE')
          database = os.getenv('SNOWFLAKE_DATABASE')
          schema = os.getenv('SNOWFLAKE_SCHEMA')
          private_key=os.getenv('SNOWFLAKE_PRIVATE_KEY')

          # Connect to Snowflake
          conn = snowflake.connector.connect(
              account=account,
              user=user,
              private_key=private_key,
              role=role,
              warehouse=warehouse,
              database=database,
              schema=schema
          )
          cursor = conn.cursor()

          # Read changed SQL files
          with open("changed_files.txt", "r") as f:
              sql_files = [line.strip() for line in f.readlines() if line.strip()]

          if not sql_files:
              print("No SQL files to deploy. Exiting...")
              sys.exit(0)

          print(f"Deploying {len(sql_files)} changed SQL files...")

          for sql_file in sql_files:
              try:
                  with open(sql_file, "r") as f:
                      sql_content = f.read()
                  print(f"Executing {sql_file}...")
                  cursor.execute(sql_content)
              except Exception as e:
                  print(f"Error executing {sql_file}: {e}")
                  sys.exit(1)

          conn.close()
          EOL
          
          python deploy.py
