# .github/workflows/snowflake-deploy.yml

name: Snowflake Deployment

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy_to_snowflake:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.ref == 'prod_release'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install snowflake-connector-python sqlfluff
      
      - name: Find latest release folder
        id: find_folder
        run: |
          # Look for release folders in the Production Releases directory
          if [ -d "Production Releases" ]; then
            latest_folder=$(ls -d "Production Releases"/prod_release* 2>/dev/null | sort -r | head -n 1)
            if [ -n "$latest_folder" ]; then
              echo "RELEASE_FOLDER=$latest_folder" >> $GITHUB_ENV
              echo "Found latest release folder: $latest_folder"
            else
              echo "No release folders found in Production Releases directory"
              exit 1
            fi
          else
            echo "Production Releases directory not found"
            exit 1
          fi
      
      - name: Validate SQL files
        run: |
          echo "Validating SQL files in $RELEASE_FOLDER..."
          if [ -d "$RELEASE_FOLDER" ]; then
            for file in $(find "$RELEASE_FOLDER" -name "*.sql"); do 
              echo "Validating $file"
              sqlfluff lint "$file" --dialect snowflake
            done
          else
            echo "No SQL files found in $RELEASE_FOLDER"
            exit 1
          fi
      
      - name: Deploy to Snowflake
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          LOG_TABLE: "DEPLOYMENT_LOGS"
          RELEASE_FOLDER: ${{ env.RELEASE_FOLDER }}
        run: |
          cat > deploy.py << 'EOL'
          import os
          import snowflake.connector
          import datetime
          import sys
          import glob
          
          # Get environment variables
          account = os.environ.get('SNOWFLAKE_ACCOUNT')
          user = os.environ.get('SNOWFLAKE_USER')
          password = os.environ.get('SNOWFLAKE_PASSWORD')
          role = os.environ.get('SNOWFLAKE_ROLE')
          warehouse = os.environ.get('SNOWFLAKE_WAREHOUSE')
          database = os.environ.get('SNOWFLAKE_DATABASE')
          schema = os.environ.get('SNOWFLAKE_SCHEMA')
          log_table = os.environ.get('LOG_TABLE')
          release_folder = os.environ.get('RELEASE_FOLDER')
          
          # GitHub variables
          commit_sha = os.environ.get('GITHUB_SHA')
          branch_name = os.environ.get('GITHUB_REF_NAME')
          release_name = os.path.basename(release_folder)
          
          print(f"Processing files from release folder: {release_folder}")
          
          # Connect to Snowflake
          conn = snowflake.connector.connect(
              account=account,
              user=user,
              password=password,
              role=role,
              warehouse=warehouse,
              database=database,
              schema=schema
          )
          
          # Check if log table exists, create if not
          cursor = conn.cursor()
          cursor.execute(f"""
          CREATE TABLE IF NOT EXISTS {log_table} (
              DEPLOYMENT_ID NUMBER AUTOINCREMENT,
              TIMESTAMP TIMESTAMP_LTZ,
              BRANCH_NAME STRING,
              RELEASE_NAME STRING,
              COMMIT_SHA STRING,
              FILE_NAME STRING,
              STATUS STRING,
              ERROR_MESSAGE STRING
          )
          """)
          
          # Find all SQL files in the release folder
          sql_files = glob.glob(f"{release_folder}/**/*.sql", recursive=True)
          sql_files.sort()  # Sort files to ensure consistent execution order
          
          if not sql_files:
              print(f"No SQL files found in {release_folder}")
              sys.exit(1)
              
          print(f"Found {len(sql_files)} SQL files to process")
          
          # Process SQL files
          success = True
          for file_path in sql_files:
              with open(file_path, 'r') as f:
                  sql_content = f.read()
              
              try:
                  print(f"Executing {file_path}...")
                  cursor.execute(sql_content)
                  
                  # Log successful execution
                  cursor.execute(f"""
                  INSERT INTO {log_table} (
                      TIMESTAMP, BRANCH_NAME, RELEASE_NAME, COMMIT_SHA, 
                      FILE_NAME, STATUS, ERROR_MESSAGE
                  ) VALUES (
                      CURRENT_TIMESTAMP(), %s, %s, %s, %s, 'SUCCESS', NULL
                  )
                  """, (branch_name, release_name, commit_sha, file_path))
                  
              except Exception as e:
                  error_message = str(e)
                  print(f"Error executing {file_path}: {error_message}")
                  
                  # Log failed execution
                  cursor.execute(f"""
                  INSERT INTO {log_table} (
                      TIMESTAMP, BRANCH_NAME, RELEASE_NAME, COMMIT_SHA, 
                      FILE_NAME, STATUS, ERROR_MESSAGE
                  ) VALUES (
                      CURRENT_TIMESTAMP(), %s, %s, %s, %s, 'FAILED', %s
                  )
                  """, (branch_name, release_name, commit_sha, file_path, error_message))
                  
                  success = False
          
          conn.close()
          
          if not success:
              sys.exit(1)
          EOL
          python deploy.py
          
      - name: Generate Deployment Summary
        if: always()
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          LOG_TABLE: "DEPLOYMENT_LOGS"
          RELEASE_FOLDER: ${{ env.RELEASE_FOLDER }}
        run: |
          cat > log_summary.py << 'EOL'
          import os
          import snowflake.connector
          
          # Get environment variables
          account = os.environ.get('SNOWFLAKE_ACCOUNT')
          user = os.environ.get('SNOWFLAKE_USER')
          password = os.environ.get('SNOWFLAKE_PASSWORD')
          role = os.environ.get('SNOWFLAKE_ROLE')
          warehouse = os.environ.get('SNOWFLAKE_WAREHOUSE')
          database = os.environ.get('SNOWFLAKE_DATABASE')
          schema = os.environ.get('SNOWFLAKE_SCHEMA')
          log_table = os.environ.get('LOG_TABLE')
          commit_sha = os.environ.get('GITHUB_SHA')
          release_folder = os.environ.get('RELEASE_FOLDER')
          release_name = os.path.basename(release_folder)
          
          # Connect to Snowflake
          conn = snowflake.connector.connect(
              account=account,
              user=user,
              password=password,
              role=role,
              warehouse=warehouse,
              database=database,
              schema=schema
          )
          
          cursor = conn.cursor()
          cursor.execute(f"""
          SELECT FILE_NAME, STATUS, ERROR_MESSAGE 
          FROM {log_table} 
          WHERE COMMIT_SHA = '{commit_sha}' AND RELEASE_NAME = '{release_name}'
          ORDER BY TIMESTAMP DESC
          """)
          
          rows = cursor.fetchall()
          
          print(f"Deployment Log Summary for {release_name}:")
          print("----------------------------------------")
          
          success_count = 0
          failure_count = 0
          
          for row in rows:
              file_name, status, error = row
              if status == 'SUCCESS':
                  success_count += 1
                  print(f"✅ {file_name}: SUCCESS")
              else:
                  failure_count += 1
                  print(f"❌ {file_name}: FAILED - {error}")
          
          print("----------------------------------------")
          print(f"Total: {len(rows)} files processed")
          print(f"Successful: {success_count}")
          print(f"Failed: {failure_count}")
          
          conn.close()
          EOL
          python log_summary.py
