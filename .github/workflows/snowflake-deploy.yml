name: Snowflake Deployment via Liquibase

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - uat

jobs:
  deploy_with_liquibase:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug Branch
        run: echo "Running on branch $GITHUB_REF_NAME"

      - name: Set up Java (for Liquibase)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Liquibase and Dependencies
        run: |
          curl -sL https://github.com/liquibase/liquibase/releases/latest/download/liquibase.zip -o liquibase.zip
          unzip liquibase.zip -d liquibase
          sudo mv liquibase/liquibase /usr/local/bin/liquibase
          liquibase --version

      - name: Get changed SQL files
        id: changed-files
        run: |
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep '\.sql$' || true)
          echo "$CHANGED_FILES" > changed_files.txt
          echo "sql_files=$(echo "$CHANGED_FILES" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Determine Environment and DB Mapping
        id: env-map
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          TARGET_BRANCH=${{ github.event.pull_request.base.ref }}
          if [[ "$BRANCH_NAME" == uat_release* ]] && [[ "$TARGET_BRANCH" == "uat" ]]; then
            ENV_SUFFIX="_UAT"
          elif [[ "$BRANCH_NAME" == prod_release* ]] && [[ "$TARGET_BRANCH" == "main" ]]; then
            ENV_SUFFIX="_PROD"
          else
            echo "❌ No valid env suffix match. Skipping."
            exit 0
          fi
          get_database_name() {
            local folder=$1
            case $folder in
              com_dm) echo "DA_COM" ;;
              fin_dm) echo "DA_FIN" ;;
              mfg_dm) echo "DA_MFG" ;;
              mrkt_dm) echo "DA_MRKT" ;;
              prc_dm) echo "DA_PRC" ;;
              scm_dm) echo "DA_SCM" ;;
              udp) echo "DA_UDP" ;;
              *) echo "" ;;
            esac
          }
          echo "" > sql_to_db_mapping.txt
          while IFS= read -r FILE; do
            FOLDER=$(echo "$FILE" | cut -d'/' -f1)
            DB_NAME=$(get_database_name "$FOLDER")
            if [[ -n "$DB_NAME" ]]; then
              echo "${DB_NAME}${ENV_SUFFIX}:$FILE" >> sql_to_db_mapping.txt
            fi
          done < changed_files.txt
          cat sql_to_db_mapping.txt

      - name: Save Snowflake Private Key to file
        run: |
          echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY }}" | base64 --decode > snowflake_key.p8
          chmod 600 snowflake_key.p8

      - name: Deploy SQL files using Liquibase
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_KEYFILE: snowflake_key.p8
          SNOWFLAKE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_KEY_PASSPHRASE }}
        run: |
          while IFS=: read -r DATABASE FILE; do
            echo "Deploying $FILE to $DATABASE..."

            liquibase \
              --url="jdbc:snowflake://${SNOWFLAKE_ACCOUNT}.snowflakecomputing.com/?warehouse=${SNOWFLAKE_WAREHOUSE}&role=${SNOWFLAKE_ROLE}&db=${DATABASE}&schema=${SNOWFLAKE_SCHEMA}" \
              --changeLogFile="$FILE" \
              --username="${SNOWFLAKE_USERNAME}" \
              --snowsqlPrivateKeyFile="${SNOWFLAKE_KEYFILE}" \
              --snowsqlPrivateKeyPassphrase="${SNOWFLAKE_KEY_PASSPHRASE}" \
              update || {
                echo "❌ Liquibase failed on $FILE. Exiting."
                exit 1
              }

            echo "✅ Successfully deployed $FILE"

          done < sql_to_db_mapping.txt
